// widget-src/components/edit-mode/MessageBuilder.tsx

// Dependencies
const { AutoLayout, Text, useSyncedState } = figma.widget
import { remapTokens } from "@/utils"
import { useDynamicState, type SetterProp } from "@/hooks"
import { EDITOR_STATE, EDITOR_INPUTS } from "@/constants"
import {
  Section,
  Label,
  ButtonsRow,
  Button,
  ButtomSmall,
  ChatButtonEditable,
  Selector,
  TextInput,
  Icon,
  Slider,
} from "@/components/edit-mode/atoms"

interface MessageBuilderProps extends Partial<AutoLayoutProps>, ReqCompProps {
  renderElement: boolean
  editorManager: [EditorState, SetterProp<EditorState>, SetterProp<ChatState>]
}

export function MessageBuilder({ editorManager, renderElement, theme, ...props }: MessageBuilderProps) {
  const [
    {
      // –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      dir,
      type,
      text,
      name,
      extension,
      size,
      buttons,
      hidePreview,
      isImg,
      imgSrc,

      // –≤—Ä–µ–º—è
      messageTime,

      // —Ä–µ–∞–∫—Ü–∏–∏
      reactionEnabled,
      reactionEmoji,
      reactionTime,
      rxnAvatarSrc,
    },
    setEditorState,
    setChatState,
  ] = editorManager

  // –ø—Ä–∞–≤—ã–π —Å–∞–π–¥–±–∞—Ä (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã)
  const [showHeaderActions, setShowHeaderActions] = useSyncedState<boolean>("showHeaderActions", true)
  const [showNewUserCard, setShowNewUserCard] = useSyncedState<boolean>("showNewUserCard", true)
  const [profileName, setProfileName] = useSyncedState<string>("profileName", "Random User")
  const [profileCountry, setProfileCountry] = useSyncedState<string>("profileCountry", "üá≥üá¨ Nigeria")
  const [profileReg, setProfileReg] = useSyncedState<string>("profileReg", "January 2024")

  const [headerUsername, setHeaderUsername] = useSyncedState<string>("headerUsername", "Random User")
  const [headerLastSeen, setHeaderLastSeen] = useSyncedState<string>("headerLastSeen", "last seen just now")
  const [statusTime, setStatusTime] = useSyncedState<string>("statusTime", "9:41")

  const [batteryPercent, setBatteryPercent] = useSyncedState<number>("batteryPercent", 100)

  // —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–Ω–µ–π
  const [dayState, setDayState] = useDynamicState<{ value: string }>({ value: "–°–µ–≥–æ–¥–Ω—è" })

  const clamp = (n: number, min: number, max: number) => Math.max(min, Math.min(max, n))
  const setBatterySafe = (val: number) => setBatteryPercent(clamp(Math.round(val || 0), 0, 100))

  const resetInputs = () => {
    Object.entries(EDITOR_STATE).map(([key, value]) =>
      setEditorState(key as keyof EditorState, value as never),
    )
  }

  // –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  const updateButton = (row: number, id: number, newvals: Partial<Message["buttons"][number][number]>) => {
    setEditorState(
      "buttons",
      buttons.map((buttonRow, rowIndex) =>
        rowIndex === row
          ? buttonRow.map((button, buttonIndex) =>
              buttonIndex === id ? { ...button, ...newvals } : button,
            )
          : buttonRow,
      ),
    )
  }
  const addButtonToRow = (row: number, nextId: number) => {
    setEditorState(
      "buttons",
      buttons.map((r, i) => (i === row ? [...r, { id: nextId, text: `–ö–Ω–æ–ø–∫–∞ ${row + 1}-${nextId}`, hasRef: false }] : r)),
    )
  }
  const removeButtonFromRow = (row: number, id: number) => {
    if (buttons[row].length === 1) {
      setEditorState("buttons", buttons.filter((_, i) => i !== row))
    } else {
      setEditorState("buttons", buttons.map((r, i) => (i === row ? r.filter((b) => b.id !== id) : r)))
    }
  }
  const addRowOfButtons = () =>
    setEditorState("buttons", [...buttons, [{ id: 1, text: `–ö–Ω–æ–ø–∫–∞ ${buttons.length}-1`, hasRef: false }]])

  // –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Shared Plugin Data (vault)
  const loadMessageImageFromVault = () => {
    const page = figma.currentPage
    try {
      const n = parseInt(page.getSharedPluginData("tg_vault", "messageImageChunks") || "0", 10)
      if (!n || Number.isNaN(n)) return figma.notify("–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
      let out = ""
      for (let i = 0; i < n; i++) out += page.getSharedPluginData("tg_vault", `messageImageDataURL_${i}`) || ""
      if (out && out.startsWith("data:image/")) {
        setEditorState("imgSrc", out)
        figma.notify("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
      } else figma.notify("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    } catch (e) {
      console.warn("loadMessageImageFromVault", e)
      figma.notify("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
    }
  }

  const loadReactionAvatarFromVault = () => {
    const page = figma.currentPage
    try {
      // —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ reactionAvatar*, –∏–Ω–∞—á–µ fallback –Ω–∞ messageImage*
      let n = parseInt(page.getSharedPluginData("tg_vault", "reactionAvatarChunks") || "0", 10)
      let prefix = "reactionAvatarDataURL_"
      if (!n || Number.isNaN(n)) {
        n = parseInt(page.getSharedPluginData("tg_vault", "messageImageChunks") || "0", 10)
        prefix = "messageImageDataURL_"
      }
      if (!n || Number.isNaN(n)) return figma.notify("–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏")

      let out = ""
      for (let i = 0; i < n; i++) out += page.getSharedPluginData("tg_vault", `${prefix}${i}`) || ""
      if (out && out.startsWith("data:image/")) {
        setEditorState("rxnAvatarSrc", out)
        figma.notify("–ê–≤–∞—Ç–∞—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
      } else figma.notify("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏")
    } catch (e) {
      console.warn("loadReactionAvatarFromVault", e)
      figma.notify("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏")
    }
  }

  const addMessageToChat = () => {
    // —Ü–∏–∫–ª–∏–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (In ‚Üî Out) –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–±–∏–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤
    setEditorState("dir", (prev) => ((prev + 1) % EDITOR_INPUTS.dir.map.length) as typeof prev)

    // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—Ä–µ–º–µ–Ω–∏: –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏ –∏ –∑–∞–¥–∞–Ω–æ reactionTime ‚Äî –±–µ—Ä—ë–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ–±—â–µ–µ messageTime
    const computedTime =
      (reactionEnabled && (reactionTime || "").trim())
        ? reactionTime
        : ((messageTime || "").trim() ? messageTime : undefined)

    const base: Message = {
      dir, type, text, name, extension, size, buttons, isImg, imgSrc,
      time: computedTime,
    }

    const msg: WithReaction<Message> = reactionEnabled
      ? { ...base, reaction: { emoji: (reactionEmoji ?? "‚ù§Ô∏è"), avatarSrc: rxnAvatarSrc || undefined } }
      : base

    setChatState("messages", (prev) => {
      const all = [...(prev ?? [])]
      const last = all.pop()
      if (typeof last !== "undefined" && Array.isArray(last) && last[0]?.dir === dir) {
        last.push(msg as Message); all.push(last)
      } else {
        if (typeof last !== "undefined") all.push(last)
        all.push([msg as Message])
      }
      return all
    })
  }

  // —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–Ω–µ–π
  const addDayDivider = () => {
    const label = (dayState.value || "").trim()
    if (!label) return figma.notify("–ü–æ–¥–ø–∏—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø—É—Å—Ç–∞")
    setChatState("messages", (prev) => {
      const all = [...(prev ?? [])]
      all.push({ kind: "day", label } as any)
      return all
    })
    figma.notify(`–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${label}`)
  }

  // —Ü–≤–µ—Ç–∞
  const color = remapTokens({
    surface: {
      primaryHover: { dark: "#EAFFC8", light: "#567FE7" },
      primary: { dark: "#D3FF8D", light: "#2851B7" },
      primary30: { dark: "#D3FF8D4D", light: "#2851B74D" },
      telegramButton: { dark: "#FFF3", light: "#24242487" },
      action: { dark: "#313131", light: "#313131" },
      actionHover: { dark: "#444444", light: "#444444" },
      inputBg: { dark: "#0000004D", light: "#00000015" },
      bg: { dark: "#252525", light: "#FFFFFF" },
    },
    text: {
      default: { dark: "#FFFFFF", light: "#000" },
      inverted: { dark: "#000", light: "#FFF" },
      black: { dark: "#000", light: "#000" },
      white: { dark: "#FFF", light: "#FFF" },
    },
  })[theme]

  // —Å–µ–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
  function ButtonsSection() {
    return (
      <AutoLayout name="Buttons Container" cornerRadius={8} overflow="visible" direction="vertical" spacing={12} width="fill-parent">
        {buttons.map(
          (buttonsRow, rowIndex) =>
            buttonsRow.length > 0 && (
              <ButtonsRow key={rowIndex}>
                <ButtomSmall onEvent={() => removeButtonFromRow(rowIndex, buttonsRow.length - 1)} icon="minus" tooltip="–£–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑ —Ä—è–¥–∞" colorPalette={color} />
                {buttonsRow.map((button, buttonIndex) => (
                  <ChatButtonEditable
                    key={buttonIndex}
                    value={button.text}
                    onEvent={(e) => updateButton(rowIndex, buttonIndex, { text: e.characters })}
                    name="chat-button"
                    width="fill-parent"
                    colorPalette={color}
                  />
                ))}
                <ButtomSmall onEvent={() => addButtonToRow(rowIndex, buttonsRow.length + 1)} tooltip="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥" colorPalette={color} />
              </ButtonsRow>
            ),
        )}
        <ButtonsRow>
          <ButtomSmall onEvent={() => addRowOfButtons()} colorPalette={color}>–î–æ–±–∞–≤–∏—Ç—å —Ä—è–¥ –∫–Ω–æ–ø–æ–∫</ButtomSmall>
        </ButtonsRow>
      </AutoLayout>
    )
  }

  // UI
  return (
    renderElement && (
      <AutoLayout
        name="MessageBuilder"
        positioning="absolute"
        overflow="visible"
        width={390}
        y={16}
        x={{ type: "right", offset: -25 - 390 }}
        effect={[
          { type: "drop-shadow", color: "#00000059", offset: { x: 0, y: 3 }, blur: 26, showShadowBehindNode: false },
          { type: "drop-shadow", color: "#00000040", offset: { x: 0, y: 4 }, blur: 108.5, showShadowBehindNode: false },
        ]}
        fill={color.surface.bg}
        cornerRadius={16}
        direction="vertical"
        spacing={24}
        padding={{ vertical: 32, horizontal: 16 }}
        height={"hug-contents"}
        horizontalAlignItems="center"
        stroke={color.surface.primary30}
        strokeAlign="outside"
        strokeDashPattern={[16, 8]}
        {...props}
      >
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <Section horizontalAlignItems={"center"}>
          <Text name="title" fill={color.text.default} verticalAlignText="center" lineHeight={22} fontSize={22} fontWeight={600} height={46}>
            –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          </Text>
          <Icon
            tooltip={hidePreview ? "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é" : "–°–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é"}
            onEvent={() => setEditorState("hidePreview", (bool) => !bool)}
            icon={hidePreview ? "show" : "hide"}
            theme={theme}
            opacity={hidePreview ? 1 : 0.5}
            x={{ type: "left", offset: 6 }}
            color={hidePreview ? (color.surface.primaryHover as string) : (color.text.default as string)}
          />
          <Icon tooltip="–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—è" onEvent={() => resetInputs()} icon={"reset"} theme={theme} color={color.text.default as string} />
        </Section>

        {/* 1. –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Ç–∏–ø */}
        <Section>
          <Label colorPalette={color}>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</Label>
          <Selector
            onEvent={(_, i) => setEditorState("dir", i)}
            value={dir}
            options={["–í—Ö–æ–¥—è—â–µ–µ", "–ò—Å—Ö–æ–¥—è—â–µ–µ"]}
            tips={["–°–ª–µ–≤–∞ (–ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω)", "–°–ø—Ä–∞–≤–∞ (—Ü–≤–µ—Ç–Ω–æ–π —Ñ–æ–Ω)"]}
            colorPalette={color}
          />
        </Section>

        <Section>
          <Label colorPalette={color}>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</Label>
          <Selector
            onEvent={(_, i) => setEditorState("type", i)}
            value={type}
            options={["–§–∞–π–ª", "–¢–µ–∫—Å—Ç", "–ö–∞—Ä—Ç–∏–Ω–∫–∞"]}
            tips={["–§–∞–π–ª/–∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏", "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç", "–§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é"]}
            colorPalette={color}
          />
        </Section>

        {/* 2. –í—Ä–µ–º—è */}
        <Section>
          <Label colorPalette={color}>–í—Ä–µ–º—è (–¥–ª—è —Å—Ç–∞—Ç—É—Å–∞)</Label>
          <TextInput
            onEvent={(e) => setEditorState("messageTime", e.characters)}
            value={messageTime ?? "10:15"}
            placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:15"
            colorPalette={color}
          />
          <Text fill={color.text.default} opacity={0.6} fontSize={12}>
            –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —Ä–µ–∞–∫—Ü–∏–∏ –∏ –∑–∞–¥–∞–Ω–æ ¬´–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏¬ª, –æ–Ω–æ –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
          </Text>
        </Section>

        {/* 3. –°–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
        <Section hidden={type !== 1}>
          <Label colorPalette={color}>–¢–µ–∫—Å—Ç</Label>
          <TextInput
            onEvent={(e) => setEditorState("text", e.characters)}
            value={text}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶"
            isResizable={true}
            colorPalette={color}
          />
          <ButtonsSection />
        </Section>

        <Section hidden={type !== 0}>
          <Label colorPalette={color}>–§–∞–π–ª / –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</Label>
          <TextInput onEvent={(e) => setEditorState("name", e.characters)} value={name} placeholder="–ò–º—è —Ñ–∞–π–ª–∞" colorPalette={color} />
          <TextInput onEvent={(e) => setEditorState("extension", e.characters)} value={extension} placeholder="–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .png)" colorPalette={color} />
          <TextInput onEvent={(e) => setEditorState("size", e.characters)} value={size} placeholder="–†–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2.1)" colorPalette={color} />
          <ButtonsSection />
          <AutoLayout onClick={() => setEditorState("isImg", (prev) => !prev)} tooltip="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" width={"fill-parent"} spacing={8} padding={{ vertical: 0, horizontal: 16 }} verticalAlignItems="center">
            <Text name="title" fill={color.text.default} width="fill-parent" lineHeight={22} fontSize={17} fontWeight={500}>
              –°–∂–∞—Ç–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
            </Text>
            <Slider onEvent={console.log} value={isImg} colorPalette={color} />
          </AutoLayout>
        </Section>

        <Section hidden={type !== 2}>
          <Label colorPalette={color}>–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é</Label>
          <TextInput onEvent={(e) => setEditorState("text", e.characters)} value={text} placeholder="–ü–æ–¥–ø–∏—Å—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" isResizable={true} colorPalette={color} />
          <ButtonsSection />
          <Button onEvent={loadMessageImageFromVault} colorPalette={color}>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ Vault</Button>
          <Text name="img-hint" fill={color.text.default} opacity={imgSrc ? 0.8 : 0.5} fontSize={12}>
            {imgSrc ? "–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ" : "–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"}
          </Text>
        </Section>

        {/* 4. –†–µ–∞–∫—Ü–∏–∏ */}
        <Section>
          <Label colorPalette={color}>–†–µ–∞–∫—Ü–∏–∏ (Telegram)</Label>
          <ButtonsRow>
            <ButtomSmall onEvent={() => setEditorState("reactionEnabled", (v: boolean) => !v)} colorPalette={color}>
              {reactionEnabled ? "–í–∫–ª" : "–í—ã–∫–ª"}
            </ButtomSmall>
            <TextInput
              onEvent={(e) => setEditorState("reactionEmoji", e.characters)}
              value={reactionEmoji ?? "‚ù§Ô∏è"}
              placeholder="–≠–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä. ‚ù§Ô∏è, üëç, üòÇ)"
              colorPalette={color}
            />
            <TextInput
              onEvent={(e) => setEditorState("reactionTime", e.characters)}
              value={reactionTime ?? "10:15"}
              placeholder="–í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏ (–Ω–∞–ø—Ä. 10:15)"
              colorPalette={color}
            />
          </ButtonsRow>
          <ButtonsRow>
            <Button onEvent={loadReactionAvatarFromVault} colorPalette={color}>–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ Vault</Button>
          </ButtonsRow>
          <Text name="rxn-img-hint" fill={color.text.default} opacity={rxnAvatarSrc ? 0.8 : 0.5} fontSize={12}>
            {rxnAvatarSrc ? "–ê–≤–∞—Ç–∞—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞" : "–ê–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}
          </Text>
        </Section>

        {/* 5. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã */}
        <Section><Label isCollapsable={true} colorPalette={color}>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</Label></Section>

        <Section>
          <Label colorPalette={color}>–ö–Ω–æ–ø–∫–∏ ¬´–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å / –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã¬ª</Label>
          <Button onEvent={() => setShowHeaderActions((v) => !v)} colorPalette={color}>{showHeaderActions ? "–í–∫–ª" : "–í—ã–∫–ª"}</Button>
        </Section>

        <Section>
          <Label colorPalette={color}>–ö–∞—Ä—Ç–æ—á–∫–∞ ¬´–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª</Label>
          <Button onEvent={() => setShowNewUserCard((v) => !v)} colorPalette={color}>{showNewUserCard ? "–í–∫–ª" : "–í—ã–∫–ª"}</Button>
        </Section>

        <Section>
          <TextInput onEvent={(e) => setProfileName(e.characters)} value={profileName} placeholder="–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è" colorPalette={color} />
          <TextInput onEvent={(e) => setProfileCountry(e.characters)} value={profileCountry} placeholder="–°—Ç—Ä–∞–Ω–∞" colorPalette={color} />
          <TextInput onEvent={(e) => setProfileReg(e.characters)} value={profileReg} placeholder="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–º–µ—Å—è—Ü –≥–æ–¥)" colorPalette={color} />
        </Section>

        <Section>
          <Label colorPalette={color}>–•–µ–¥–µ—Ä –∏ —Å—Ç–∞—Ç—É—Å</Label>
          <TextInput onEvent={(e) => setHeaderUsername(e.characters)} value={headerUsername} placeholder="–ù–∏–∫ –≤ —à–∞–ø–∫–µ" colorPalette={color} />
          <TextInput onEvent={(e) => setHeaderLastSeen(e.characters)} value={headerLastSeen} placeholder="last seen‚Ä¶" colorPalette={color} />
          <TextInput onEvent={(e) => setStatusTime(e.characters)} value={statusTime} placeholder="–í—Ä–µ–º—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞ (9:41)" colorPalette={color} />
        </Section>

        <Section>
          <Label colorPalette={color}>–ë–∞—Ç–∞—Ä–µ—è</Label>
          <AutoLayout width={"fill-parent"} spacing={8} verticalAlignItems="center">
            <ButtomSmall onEvent={() => setBatterySafe(batteryPercent - 10)} tooltip="-10%" colorPalette={color}>-10</ButtomSmall>
            <ButtomSmall onEvent={() => setBatterySafe(batteryPercent - 1)} tooltip="-1%" colorPalette={color}>-1</ButtomSmall>
            <TextInput
              onEvent={(e) => {
                const num = parseInt(e.characters.replace(/[^\d]/g, ""), 10)
                setBatterySafe(Number.isFinite(num) ? num : 0)
              }}
              value={String(clamp(batteryPercent, 0, 100))}
              placeholder="0‚Äì100"
              colorPalette={color}
            />
            <ButtomSmall onEvent={() => setBatterySafe(batteryPercent + 1)} tooltip="+1%" colorPalette={color}>+1</ButtomSmall>
            <ButtomSmall onEvent={() => setBatterySafe(batteryPercent + 10)} tooltip="+10%" colorPalette={color}>+10</ButtomSmall>
          </AutoLayout>
          <Text fill={color.text.default} opacity={0.6} fontSize={12}>
            1‚Äì20% ‚Äî –∫—Ä–∞—Å–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ –∏ –±–µ–ª—ã–µ —Ü–∏—Ñ—Ä—ã; 0% ‚Äî –ø—É—Å—Ç–∞—è —Å –∫—Ä–∞—Å–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏.
          </Text>
        </Section>

        {/* 6. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–Ω–µ–π */}
        <Section>
          <Label colorPalette={color}>–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–Ω—è</Label>
          <TextInput onEvent={(e) => setDayState("value", e.characters)} value={dayState.value} placeholder="–°–µ–≥–æ–¥–Ω—è / –í—á–µ—Ä–∞ / 1 –Ω–æ—è–±—Ä—è" colorPalette={color} />
          <Button onEvent={addDayDivider} colorPalette={color}>–î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å</Button>
        </Section>

        {/* –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */}
        <Button onEvent={addMessageToChat} colorPalette={color}>–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç</Button>
      </AutoLayout>
    )
  )
}
