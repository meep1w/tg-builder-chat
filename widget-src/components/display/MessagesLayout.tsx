// widget-src/components/display/MessagesLayout.tsx

// Dependencies
const { AutoLayout, useSyncedState } = figma.widget
// Components
import { DirectionContainer, WithButtons } from "@/components/display/atoms"
import { Message } from "@/components/ui"
import { DaySeparator } from "@/components/ui/DaySeparator"
import { NewUserCard } from "@/components/ui/NewUserCard"

type DayDivider = { label: string } & ({ kind: "day" } | { type: "day" })

interface MessagesLayoutProps extends Partial<AutoLayoutProps>, ReqCompProps, OptionalRender {
  // –¥–æ–ø—É—Å–∫–∞–µ–º –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ day-divider'—ã
  messages?: (Message[] | DayDivider | undefined)[]
}

/** Arranges messages (In/Out). Supports inline day dividers and the NewUserCard at the top. */
export function MessagesLayout({ messages, renderElements, children, theme, ...props }: MessagesLayoutProps) {
  // —Ä–µ–∂–∏–º "Last Message Only"
  const lastSide = messages?.filter(Boolean).slice(-1)[0]
  const lastMessage = Array.isArray(lastSide) ? lastSide[lastSide.length - 1] : undefined

  // —á–∏—Ç–∞–µ–º –¢–ï –ñ–ï –∫–ª—é—á–∏, —á—Ç–æ –ø–∏—à–µ—Ç MessageBuilder
  const [showNewUserCard] = useSyncedState<boolean>("showNewUserCard", true)
  const [profileName] = useSyncedState<string>("profileName", "Random User")
  const [profileCountry] = useSyncedState<string>("profileCountry", "üá≥üá¨ Nigeria")
  const [profileReg] = useSyncedState<string>("profileReg", "January 2024")

  if (!renderElements) {
    return lastMessage ? (
      <AutoLayout direction="vertical" spacing={28}>
        <WithButtons buttons={lastMessage.buttons} theme={theme}>
          <Message {...lastMessage} theme={theme} />
        </WithButtons>
        {children}
      </AutoLayout>
    ) : (
      <>{children}</>
    )
  }

  // –æ—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∫–∞–∫ –æ–±—Å—É–∂–¥–∞–ª–∏)
  const GAP_BELOW_ACTIONS = 34
  const GAP_BELOW_CARD = 16

  return (
    <AutoLayout
      name="Container Layout"
      x={{ type: "left-right", leftOffset: 0, rightOffset: 0 }}
      y={{ type: "bottom", offset: 0 }}
      overflow="visible"
      direction="vertical"
      spacing={24}
      padding={{ vertical: 16, horizontal: 8 }}
      width={390}
      verticalAlignItems="end"
      horizontalAlignItems="center"
      {...props}
    >
      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ª–µ–Ω—Ç—ã, –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
      {showNewUserCard && (
        <AutoLayout
          name="NewUserIntro"
          direction="vertical"
          width="fill-parent"
          horizontalAlignItems="center"
          padding={{ top: GAP_BELOW_ACTIONS, bottom: GAP_BELOW_CARD }}
        >
          <NewUserCard username={profileName} country={profileCountry} registration={profileReg} />
        </AutoLayout>
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ö–æ–¥ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –ª–µ–Ω—Ç—ã */}
      {messages?.map((entry, key) => {
        // 1) day-divider (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º kind/type)
        if (entry && typeof entry === "object" && !Array.isArray(entry) && (entry as any).label) {
          const isDay = (entry as any).kind === "day" || (entry as any).type === "day"
          if (isDay) {
            const d = entry as DayDivider
            return (
              <AutoLayout
                key={`day-${key}`}
                width="fill-parent"
                horizontalAlignItems="center"
                verticalAlignItems="center"
              >
                <DaySeparator label={d.label} />
              </AutoLayout>
            )
          }
        }

        // 2) –≥—Ä—É–ø–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        const dirMsg = entry as Message[] | undefined
        return (
          dirMsg && (
            <DirectionContainer key={key} dir={dirMsg[0].dir}>
              {dirMsg.map((msg, i) => (
                <WithButtons key={i} buttons={msg.buttons} theme={theme}>
                  <Message {...msg} theme={theme} />
                </WithButtons>
              ))}
            </DirectionContainer>
          )
        )
      })}

      {children}
    </AutoLayout>
  )
}
